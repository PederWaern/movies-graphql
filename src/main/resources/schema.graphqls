# All available queries
type Query {
    allMovies: [Movie]
    getMovieById(id: String!): Movie!
    allUsers: [User]
    allRatings: [Rating]
    ratingById(id: String!): Rating
    ratingByUserAndMovie(userId: String!, movieId: String!): Rating
    getUserById(id: String!): User
    config: ImageConfiguration
}

# A type that describes a Movie.
type Movie {
    id: String
    voteCount: Int
    video: Boolean
    voteAverage: Float
    title: String
    popularity: Float
    posterPath: String
    originalLanguage: String
    originalTitle : String
    genreIds : [Int]
    backdropPath: String
    adult: Boolean
    overview: String
    releaseDate: String
    ratings: [Rating]
}

# A type that represents a users Rating, with an optional Comment.
type Rating {
   id: String!
   rating: Int!
   comment: String
   user: User!
   movie: Movie!
}

type User {
   id: ID!
   name: String
   ratings: [Rating]
}
# Configuration for images
type ImageConfiguration {
    baseUrl: String!
    secureBaseUrl: String!
    logoSizes: [String!]
    posterSizes: [String!]
    profileSizes: [String!]
    stillSizes: [String!]
    backdropSizes: [String!]
}

type Mutation {
    createUser(name: String!): User
    createRating(movieRating: Int!, comment: String!, userId: String!, movieId: String!): Rating
    deleteRating(id: String!): String
}

schema {
    query: Query
    mutation: Mutation
}
